<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!--<properties url=""></properties>-->

    <!--java.util.Properties类,是一个Map集合,key和value都是String类型-->
    <!--在properties标签中可以配置很多属性-->
    <properties>
        <!--这是其中一个属性-->
        <!--<property name="key" value="value"/>-->
        <property name="jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbc.url" value="jdbc:mysql://localhost:3306/powernode"/>
        <property name="jdbc.username" value="root"/>
        <property name="jdbc.password" value="333"/>
    </properties>

    <!--default表示默认使用的环境-->
    <!--当你使用mybatis创建SqlSessionFactory对象的时候,没有指定环境的话,默认使用的环境-->
    <environments default="powernodeDB">
        <!--其中的一个环境,连接的数据库是powernode-->
        <!--一般一个数据库会对应一个SqlSessionFactory对象-->
        <!--一个环境environment会对应一个SqlSessionFactory对象-->
        <environment id="powernodeDB">
            <!--
                transactionManager标签:
                    1.作用:配置事务管理器,指定mybatis具体使用什么方式去管理事务
                    2.type属性有两个值:
                        第一个:JDBC:使用原生的JDBC代码来管理事务
                            conn.setAutoCommit(false);
                            ....
                            conn.commit();
                        第二个:MANAGED:mybatis不再负责事务的管理,交给其他的JEE来管理,例如:spring
                    3.不区分大小写,但是能二选一,不能是其他值
                    4.在mybatis中提供了一个事务管理器接口:Transaction
                        连接口有两个实现类:
                            JdbcTransaction
                            ManagedTransaction
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource配置:
                    1.dataSource被称为数据源
                    2.dataSource的作用是为程序提供Connection对象(但凡是给程序提供Connection对象的,都叫组数据源)
                    3.数据源实际上是一套规范,JDK中有这套规范:javax.sql.DataSource(这个数据源的规范,这套接口实际上是JDK规定的)
                    4.我们自己也可以编写数据源组件,只要实现javax.sql.DataSource接口就行了,实现接口中所有的方法,这样就有了自己的数据源
                    比如你可以写一个自己的数据库连接池(数据库连接池是提供链接对象的,所以数据库连接池是一个数据源)
                    5.常见的数据库连接池
                        druid
                        c3p0
                        dbcp
                        ...
                    6.type属性用来指定数据源的类型,就是指定具体是用什么方式来获取Connection对象
                        type有三个值:必须是三选一
                        type="[UNPOOLED|POOLED|JNDI]"
                        UNPOOLED:不使用数据库连接池技术,每一次请求过来后,都创建新的Connection对象
                        POOLED:使用mybatis自己实现的数据库连接池
                        JNDI:集成其他第三方的数据库连接池

                        JNDI是一套规范,大部分的web容器都实现了JNDI规范
                            例如:Tomcat,Jetty,WebLogic,WebSphere,这些服务器都实现了JNDI规范
                        JNDI是:java命名目录接口,Tomcat实现了这个规范
            -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/powernode"/>
                <property name="username" value="root"/>
                <property name="password" value="333"/>
                <property name="poolMaximumActiveConnections" value="3"/>
                <!--每隔两秒打印日志,并且尝试获取连接对象-->
                <property name="poolTimeToWait" value="2000"/>
                <!--强行让某个连接空闲,超时时间的设置-->
                <property name="poolMaximumCheckoutTime" value="10000"/>
                <!--最多的空闲数量-->
                <property name="poolMaximumIdleConnections" value="5"/>
            </dataSource>
        </environment>

        <!--这是mybatis的另一个环境,连接的是另一个数据库-->
        <environment id="mybatisDB">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value="333"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="CarMapper.xml"/>
    </mappers>
</configuration>